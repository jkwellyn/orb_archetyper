Some existing functionality does exist in bundle:

Usage:
  bundle gem GEMNAME

      create  bramipsum/Gemfile
      create  bramipsum/Rakefile
      create  bramipsum/LICENSE.txt
      create  bramipsum/README.md
      create  bramipsum/.gitignore
      create  bramipsum/bramipsum.gemspec
      create  bramipsum/lib/bramipsum.rb
      create  bramipsum/lib/bramipsum/version.rb


output as above. 
 create is in green

ORB Archetype generator: create shell projects automatically.
Support a number of templates.

usage:

	orb-generator.rb DIRECTORY [options

	    [--skip-gemfile]           # Don't create a Gemfile
  -B, [--skip-bundle]            # Don't run bundle install
  -G, [--skip-git]               # Skip .gitignore file
  etc


- specify target directory to create in. - current directory by default
- specicy name of project

- specify type
1. utility project: client gem + unit tests + rdoc
2. test project: rspec project and dependencies


Note: options parser
http://rubylearning.com/blog/2011/01/03/how-do-i-make-a-command-line-tool-in-ruby/
'opt parse'

1. utility/control client/helper gem etc
files to create 

1. rake file
2. gem file
3. .gemspec
3. .gitignore
4. tests directories: rspec as default
    ./test
5. main directories : lib folder

    ./lib/<project_name>.rb
    ./lib/<project_name>/version
6. README.rdoc

TODO create a gemfile.lock

output to the console in the following format
     create  
      create  README.rdoc
      create  Rakefile
      create  config.ru
      create  .gitignore
      create  Gemfile
      create  app
      create  app/assets/javascripts/application.js
      create  app/assets



Pre configure dependencies.

2. test project

Structure tbc

3. core library project 

  ConnectionManager
    >DB, REST, SOAP, 
  ConfigurationManager

4. command line applications

dir 
  project_name/
    bin/project_name [this is a file]
    lib
      main.txt
      lib/project_name/version



spec for orb archetyper

1. logger/logs directory

2. configuration [manager}
  environment.yml

    e.g env tiers
      :hosts:
    local:  'http://localhost:8080'
    dev:    'http://dev-service-5101.aws.opower.it:8080'
    imp:    'http://dev-service-5101.aws.opower.it:8080'
    opsqa:  'http://dev-service-5101.aws.opower.it:8080'
    prod:   'http://dev-service-5101.aws.opower.it:8080'
    qa:     'http://dev-service-5101.aws.opower.it:8080'
    scale:  'http://dev-service-5101.aws.opower.it:8080'
    stage:  'http://dev-service-5101.aws.opower.it:8080'


  global_params.yml
  local_parameter.yml

  See chipsy as example 
